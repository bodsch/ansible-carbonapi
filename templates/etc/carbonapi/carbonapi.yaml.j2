# {{ ansible_managed }}

# Need to be URL, http or https
# This url specifies the backend or a loadbalancer
#
# Is you are using carbonzipper you should set it to
# zipper's url
#

listen: "{{ carbonapi_listen }}"

# Specify URL Prefix for all handlers
prefix: ""

# Specify if metrics are exported over HTTP and if they are available on the same address or not
# pprofEnabled controls if extra HTTP Handlers to profile and debug application will be available
expvar:
  enabled: true
  pprofEnabled: false
  listen: ""

# Allow extra charsets in metric names. By default only "Latin" is allowed
# Please note that each unicodeRangeTables will slow down metric parsing a bit
#   For list of supported tables, see: https://golang.org/src/unicode/tables.go?#L3437
#   Special name "all" reserved to append all tables that's currently supported by Go
#unicodeRangeTables:
#   - "Latin"
#   - "Cyrillic"
#   - "Hiragana"
#   - "Katakana"
#   - "Han"
##   - "all"

# Controls headers that would be passed to the backend
headersToPass:
  - "X-Dashboard-Id"
  - "X-Grafana-Org-Id"
  - "X-Panel-Id"
headersToLog:
  - "X-Dashboard-Id"
  - "X-Grafana-Org-Id"
  - "X-Panel-Id"

# Specify custom function aliases.
#  This is example for alias "perMinute(metrics)" that will behave as "perSecond(metric)|scale(60)"
# define:
#   -
#     name: "perMinute"
#     template: "perSecond(\{\{.argString}}) | scale(60)"

# Control what status code will be returned where /render or find query do not return any metric
notFoundStatusCode: 404

# Max concurrent requests to CarbonZipper
concurency: 1000

cache:
  type: "{{ carbonapi_cache_type }}"
  size_mb: {{ carbonapi_cache_size_mb | int }}
  defaultTimeoutSec: {{ carbonapi_cache_default_timeout | int }}
  memcachedServers:
{% if carbonapi_cache_memcached_servers is defined and carbonapi_cache_memcached_servers | count != 0 %}
{% for host in carbonapi_cache_memcached_servers %}
    - "{{ host }}"
{% endfor %}
{% endif %}

# Amount of CPUs to use. 0 - unlimited
cpus: {{ carbonapi_cpu | int }}

# Timezone, default - local
tz: ""

# For go-carbon --- it depends on how you use it.
sendGlobsAsIs: true

# functionsConfig:
#   graphiteWeb: /etc/carbonapi/graphiteWeb.yaml

maxBatchSize: 100

graphite:
  host: "{{ carbonapi_graphite_host }}"
  interval: "{{ carbonapi_graphite_interval }}"
  prefix: "{{ carbonapi_graphite_prefix }}"
  pattern: "{{ carbonapi_graphite_pattern }}"

# Configures how often keep alive packets will be sent out
keepAliveInterval: "30s"

# Config to ensure we return version needed for providing integrated graphite docs in grafana
# without supporting tags
graphiteVersionForGrafana: 1.1.0

# Maximium idle connections to carbonzipper
idleConnections: 10
pidFile: ""

# See https://github.com/go-graphite/carbonzipper/blob/master/example.conf#L70-L108 for format explanation
upstreams:
  # Enable compatibility with graphite-web 0.9
  # This will affect graphite-web 1.0+ with multiple cluster_servers
  # Default: disabled
  graphite09compat: false

  # Number of 100ms buckets to track request distribution in. Used to build
  # 'carbon.zipper.hostname.requests_in_0ms_to_100ms' metric and friends.
  # Requests beyond the last bucket are logged as slow (default of 10 implies
  # "slow" is >1 second).
  # The last bucket is _not_ called 'requests_in_Xms_to_inf' on purpose, so
  # we can change our minds about how many buckets we want to have and have
  # their names remain consistent.
  buckets: 10

  timeouts:
    find: "2s"
    render: "10s"
    connect: "200ms"

  # Number of concurrent requests to any given backend - default is no limit.
  # If set, you likely want >= MaxIdleConnsPerHost
  concurrencyLimitPerServer: 0

  # Configures how often keep alive packets will be sent out
  keepAliveInterval: "30s"

  # Control http.MaxIdleConnsPerHost. Large values can lead to more idle
  # connections on the backend servers which may bump into limits; tune with care.
  maxIdleConnsPerHost: 100

  backends:
{% if carbonapi_upstreams_backends is defined and carbonapi_upstreams_backends | count != 0 %}
{% for host in carbonapi_upstreams_backends %}
    - "{{ host }}"
{% endfor %}
{% endif %}

graphTemplates: {{ carbonapi_graph_templates }}
expireDelaySec: {{ carbonapi_expire_delay | int }}

logger:
  - logger: ""
    file: "stderr"
    level: "info"
    encoding: "console"
    encodingTime: "iso8601"
    encodingDuration: "seconds"
  - logger: ""
    file: "{{ carbonapi_logger_logfile }}"
    level: "{{ carbonapi_logger_loglevel }}"
    encoding: "console"

# tagdb:
#   url: "http://127.0.0.1:9090"

monitoring:
    timeInQueueExpHistogram:
        start: 0.05
        bucketsNum: 25
        bucketSize: 2
    requestDurationExpHistogram:
        start: 0.05
        bucketsNum: 20
        bucketSize: 2
    requestDurationLinHistogram:
        start: 0.0
        bucketsNum: 40
        bucketSize: 0.05
    findDurationExpHistogram:
        start: 0.001
        bucketsNum: 20
        bucketSize: 2
    findDurationLinHistogram:
        start: 0.5
        bucketsNum: 20
        bucketSize: 0.5
